    CPU time for get_k_kpts: make_kpt ki>=kj (0,*)      5.63 sec, wall time      0.57 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (1,*)     12.87 sec, wall time      0.50 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (2,*)     18.90 sec, wall time      0.63 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (3,*)     29.92 sec, wall time      0.98 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (4,*)     33.40 sec, wall time      1.10 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (5,*)     32.45 sec, wall time      1.07 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (6,*)     37.37 sec, wall time      1.23 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (7,*)     41.12 sec, wall time      1.35 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (8,*)     47.27 sec, wall time      1.55 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (9,*)     72.86 sec, wall time      2.41 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (10,*)     55.86 sec, wall time      1.78 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (11,*)     67.80 sec, wall time      2.22 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (12,*)     76.14 sec, wall time      2.44 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (13,*)     67.80 sec, wall time      2.17 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (14,*)     81.32 sec, wall time      2.60 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (15,*)     78.36 sec, wall time      2.53 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (16,*)     85.88 sec, wall time      2.74 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (17,*)     78.25 sec, wall time      2.51 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (18,*)    102.39 sec, wall time      3.27 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (19,*)     88.43 sec, wall time      2.81 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (20,*)     78.89 sec, wall time      2.49 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (21,*)    101.42 sec, wall time      3.27 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (22,*)     92.38 sec, wall time      2.92 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (23,*)     95.41 sec, wall time      3.02 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (24,*)    100.88 sec, wall time      3.20 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (25,*)    112.22 sec, wall time      3.56 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (26,*)    111.98 sec, wall time      3.69 sec
Monkhorst pack size [3 3 3] ew_eta 2.0415012507608057 ew_cut 3.446555143149695
Ewald components = 0, -1.15196888453017, 1.04011066863786
    CPU time for get_j pass 1     31.58 sec, wall time      1.01 sec
    CPU time for get_j pass 2      6.61 sec, wall time      0.59 sec
    CPU time for vj and vk   1851.67 sec, wall time     60.40 sec
    CPU time for vnuc pass1: analytic int   1492.85 sec, wall time     48.53 sec
    CPU time for contracting Vnuc [0:216]     27.07 sec, wall time      0.88 sec
    CPU time for contracting Vnuc     27.07 sec, wall time      0.88 sec
    CPU time for get_nuc   1520.05 sec, wall time     49.41 sec
Ewald components = 2.22177160975447e-132, -245.992357858762, 217.051170209755
    CPU time for vnuc pass1: analytic int   1498.18 sec, wall time     48.83 sec
    CPU time for contracting Vnuc [0:216]     27.75 sec, wall time      0.87 sec
    CPU time for contracting Vnuc     27.76 sec, wall time      0.87 sec
    CPU time for get_nuc   1526.05 sec, wall time     49.70 sec
E1 = (-56.021678844638394-4.810701309618613e-14j)  E_coul = (5.679099555336436+4.893452091311216e-14j)
using HDF5 ERI storage
    CPU time for transforming oopq 145560.40 sec, wall time   4745.46 sec
    CPU time for transforming ovpq 150168.43 sec, wall time   4869.47 sec
    CPU time for transforming vvvv   1049.90 sec, wall time     32.92 sec
    CPU time for CCSD integral transformation 301681.83 sec, wall time   9807.60 sec
    CPU time for EOM-CCSD shared one-electron intermediates   1883.44 sec, wall time     61.11 sec
IMDS key to save: Loo , type: <class 'numpy.ndarray'>
IMDS key to save: Lvv , type: <class 'numpy.ndarray'>
IMDS key to save: Fov , type: <class 'numpy.ndarray'>
Made 1e intermediates

    CPU time for get_k_kpts: make_kpt ki>=kj (0,*)      1.89 sec, wall time      0.39 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (1,*)     11.03 sec, wall time      0.39 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (2,*)     20.91 sec, wall time      0.67 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (3,*)     30.43 sec, wall time      0.97 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (4,*)     33.09 sec, wall time      1.07 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (5,*)     37.16 sec, wall time      1.20 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (6,*)     38.81 sec, wall time      1.25 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (7,*)     39.86 sec, wall time      1.28 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (8,*)     40.02 sec, wall time      1.27 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (9,*)     66.94 sec, wall time      2.15 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (10,*)     60.45 sec, wall time      1.92 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (11,*)     61.52 sec, wall time      1.95 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (12,*)     67.94 sec, wall time      2.16 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (13,*)     67.37 sec, wall time      2.14 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (14,*)     73.30 sec, wall time      2.35 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (15,*)     87.69 sec, wall time      2.87 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (16,*)     97.33 sec, wall time      3.20 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (17,*)     81.04 sec, wall time      2.74 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (18,*)    133.78 sec, wall time      4.33 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (19,*)    117.23 sec, wall time      3.92 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (20,*)     91.53 sec, wall time      2.93 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (21,*)    112.12 sec, wall time      3.57 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (22,*)    101.52 sec, wall time      3.21 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (23,*)    100.56 sec, wall time      3.18 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (24,*)    100.97 sec, wall time      3.21 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (25,*)    107.58 sec, wall time      3.40 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (26,*)    105.61 sec, wall time      3.34 sec
Monkhorst pack size [3 3 3] ew_eta 2.0415012507608057 ew_cut 3.446555143149695
Ewald components = 0, -1.15196888453017, 1.04011066863786
    CPU time for get_j pass 1     29.87 sec, wall time      0.98 sec
    CPU time for get_j pass 2      6.60 sec, wall time      0.60 sec
    CPU time for vj and vk   1929.04 sec, wall time     62.81 sec
    CPU time for vnuc pass1: analytic int   1484.99 sec, wall time     48.23 sec
    CPU time for contracting Vnuc [0:216]     27.08 sec, wall time      0.86 sec
    CPU time for contracting Vnuc     27.09 sec, wall time      0.86 sec
    CPU time for get_nuc   1512.19 sec, wall time     49.09 sec
Ewald components = 2.22177160975447e-132, -245.992357858762, 217.051170209755
    CPU time for vnuc pass1: analytic int   1484.98 sec, wall time     48.41 sec
    CPU time for contracting Vnuc [0:216]     30.49 sec, wall time      0.99 sec
    CPU time for contracting Vnuc     30.50 sec, wall time      0.99 sec
    CPU time for get_nuc   1515.58 sec, wall time     49.41 sec
E1 = (-56.02167884463845-4.808241874268606e-14j)  E_coul = (5.679099555336444+4.8750341332533443e-14j)
using HDF5 ERI storage
    CPU time for transforming oopq 140438.61 sec, wall time   4516.32 sec
    CPU time for transforming ovpq 144900.62 sec, wall time   4643.53 sec
    CPU time for transforming vvvv   1089.64 sec, wall time     34.15 sec
    CPU time for CCSD integral transformation 291390.76 sec, wall time   9355.49 sec
    CPU time for EOM-CCSD shared one-electron intermediates   1884.01 sec, wall time     61.30 sec
IMDS key to save: Loo , type: <class 'numpy.ndarray'>
IMDS key to save: Lvv , type: <class 'numpy.ndarray'>
IMDS key to save: Fov , type: <class 'numpy.ndarray'>
Made 1e intermediates

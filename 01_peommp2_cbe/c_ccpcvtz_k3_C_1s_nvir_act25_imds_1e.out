    CPU time for get_k_kpts: make_kpt ki>=kj (0,*)      1.69 sec, wall time      0.16 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (1,*)      3.93 sec, wall time      0.17 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (2,*)      7.56 sec, wall time      0.26 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (3,*)     12.62 sec, wall time      0.41 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (4,*)     16.24 sec, wall time      0.51 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (5,*)     17.19 sec, wall time      0.54 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (6,*)     20.99 sec, wall time      0.66 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (7,*)     25.49 sec, wall time      0.82 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (8,*)     26.94 sec, wall time      0.85 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (9,*)     30.81 sec, wall time      0.98 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (10,*)     32.23 sec, wall time      1.02 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (11,*)     33.71 sec, wall time      1.06 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (12,*)     38.00 sec, wall time      1.21 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (13,*)     45.56 sec, wall time      1.45 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (14,*)     48.02 sec, wall time      1.55 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (15,*)     43.33 sec, wall time      1.41 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (16,*)     51.61 sec, wall time      1.64 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (17,*)     55.53 sec, wall time      1.75 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (18,*)     56.65 sec, wall time      1.79 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (19,*)     54.83 sec, wall time      1.76 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (20,*)     58.32 sec, wall time      1.83 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (21,*)     60.02 sec, wall time      1.88 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (22,*)     63.36 sec, wall time      1.99 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (23,*)     63.79 sec, wall time      2.11 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (24,*)     80.75 sec, wall time      2.61 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (25,*)     83.47 sec, wall time      2.70 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (26,*)     82.24 sec, wall time      2.65 sec
Monkhorst pack size [3 3 3] ew_eta 2.0680636387390696 ew_cut 3.402350398388744
Ewald components = 0, -1.16695765003732, 1.05358783663642
    CPU time for get_j pass 1     25.65 sec, wall time      0.91 sec
    CPU time for get_j pass 2      6.36 sec, wall time      0.73 sec
    CPU time for vj and vk   1152.77 sec, wall time     37.62 sec
    CPU time for vnuc pass1: analytic int    520.47 sec, wall time     16.85 sec
    CPU time for contracting Vnuc [0:216]     18.27 sec, wall time      0.59 sec
    CPU time for contracting Vnuc     18.28 sec, wall time      0.59 sec
    CPU time for get_nuc    538.84 sec, wall time     17.44 sec
Ewald components = 3.0606179073546e-132, -242.469443607053, 213.698400957796
    CPU time for vnuc pass1: analytic int    516.97 sec, wall time     16.69 sec
    CPU time for contracting Vnuc [0:216]     17.99 sec, wall time      0.57 sec
    CPU time for contracting Vnuc     18.00 sec, wall time      0.57 sec
    CPU time for get_nuc    535.07 sec, wall time     17.26 sec
E1 = (-51.27586912350092+3.0205146704604775e-14j)  E_coul = (4.277494077824719+1.1517492929011655e-14j)
using HDF5 ERI storage
    CPU time for transforming oopq 141884.80 sec, wall time   4544.94 sec
    CPU time for transforming ovpq 141716.41 sec, wall time   4525.19 sec
    CPU time for transforming vvvv    993.03 sec, wall time     31.11 sec
    CPU time for CCSD integral transformation 286825.54 sec, wall time   9173.73 sec
    CPU time for EOM-CCSD shared one-electron intermediates   1426.92 sec, wall time     46.05 sec
IMDS key to save: Loo , type: <class 'numpy.ndarray'>
IMDS key to save: Lvv , type: <class 'numpy.ndarray'>
IMDS key to save: Fov , type: <class 'numpy.ndarray'>
Made 1e intermediates

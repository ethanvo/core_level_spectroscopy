    CPU time for get_k_kpts: make_kpt ki>=kj (0,*)      6.18 sec, wall time      0.39 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (1,*)     16.16 sec, wall time      0.62 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (2,*)     30.26 sec, wall time      0.97 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (3,*)     40.79 sec, wall time      1.39 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (4,*)     48.70 sec, wall time      1.56 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (5,*)     61.15 sec, wall time      1.98 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (6,*)     64.86 sec, wall time      2.06 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (7,*)    121.48 sec, wall time     11.68 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (8,*)    137.75 sec, wall time     14.39 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (9,*)    117.78 sec, wall time      6.80 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (10,*)    119.28 sec, wall time      6.15 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (11,*)    117.35 sec, wall time      3.77 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (12,*)    126.87 sec, wall time      4.01 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (13,*)    125.09 sec, wall time      3.95 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (14,*)    131.81 sec, wall time      4.22 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (15,*)    150.51 sec, wall time      4.76 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (16,*)    149.48 sec, wall time      4.72 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (17,*)    152.34 sec, wall time      4.80 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (18,*)    183.75 sec, wall time      5.84 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (19,*)    176.54 sec, wall time      5.59 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (20,*)    181.42 sec, wall time      5.74 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (21,*)    194.84 sec, wall time      6.17 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (22,*)    210.81 sec, wall time      6.71 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (23,*)    210.40 sec, wall time      6.79 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (24,*)    220.68 sec, wall time      6.97 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (25,*)    234.29 sec, wall time      7.42 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (26,*)    239.30 sec, wall time      7.71 sec
Monkhorst pack size [3 3 3] ew_eta 1.379780863988 ew_cut 5.096557435665055
Ewald components = 0, -0.778571064310922, 0.704115632351815
    CPU time for get_j pass 1     75.78 sec, wall time      2.53 sec
    CPU time for get_j pass 2      7.69 sec, wall time      1.47 sec
    CPU time for vj and vk   3659.37 sec, wall time    141.36 sec
    CPU time for vnuc pass1: analytic int    295.01 sec, wall time      9.41 sec
    CPU time for contracting Vnuc [0:729]     72.34 sec, wall time      2.38 sec
    CPU time for contracting Vnuc     72.34 sec, wall time      2.38 sec
    CPU time for get_nuc    367.66 sec, wall time     11.80 sec
Ewald components = 1.37780080874323e-135, -879.68906505185, 776.814472849255
    CPU time for vnuc pass1: analytic int    286.57 sec, wall time      9.12 sec
    CPU time for contracting Vnuc [0:729]     69.35 sec, wall time      2.26 sec
    CPU time for contracting Vnuc     69.35 sec, wall time      2.26 sec
    CPU time for get_nuc    356.18 sec, wall time     11.39 sec
E1 = (-608.6704475892667+2.4941654051121252e-15j)  E_coul = (133.61105942915518-4.697106784798225e-16j)
using HDF5 ERI storage
    CPU time for transforming oopq 234479.33 sec, wall time   9561.58 sec
    CPU time for transforming ovpq 341260.27 sec, wall time  23294.06 sec
    CPU time for transforming vvvv   3454.83 sec, wall time    110.53 sec
    CPU time for CCSD integral transformation 583583.14 sec, wall time  33130.99 sec
    CPU time for EOM-CCSD shared one-electron intermediates 208653.06 sec, wall time   8156.56 sec
IMDS key to save: Loo , type: <class 'numpy.ndarray'>
IMDS key to save: Lvv , type: <class 'numpy.ndarray'>
IMDS key to save: Fov , type: <class 'numpy.ndarray'>
Made 1e intermediates

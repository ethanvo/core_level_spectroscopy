    CPU time for get_k_kpts: make_kpt ki>=kj (0,*)      4.71 sec, wall time      0.31 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (1,*)     10.79 sec, wall time      0.40 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (2,*)     16.35 sec, wall time      0.54 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (3,*)     22.82 sec, wall time      0.74 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (4,*)     24.28 sec, wall time      0.79 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (5,*)     37.77 sec, wall time      1.27 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (6,*)     40.74 sec, wall time      1.33 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (7,*)     47.47 sec, wall time      1.54 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (8,*)     46.85 sec, wall time      1.51 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (9,*)     63.81 sec, wall time      2.11 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (10,*)     66.89 sec, wall time      2.19 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (11,*)     69.66 sec, wall time      2.28 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (12,*)     74.38 sec, wall time      2.49 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (13,*)     95.10 sec, wall time      3.23 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (14,*)     91.23 sec, wall time      3.00 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (15,*)     95.35 sec, wall time      3.10 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (16,*)     94.24 sec, wall time      3.10 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (17,*)    106.55 sec, wall time      3.54 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (18,*)    113.48 sec, wall time      3.76 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (19,*)    125.87 sec, wall time      4.13 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (20,*)    121.61 sec, wall time      4.00 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (21,*)    132.64 sec, wall time      4.50 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (22,*)    153.94 sec, wall time      7.08 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (23,*)    144.59 sec, wall time      4.89 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (24,*)    146.68 sec, wall time      4.85 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (25,*)    156.79 sec, wall time      5.24 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (26,*)    168.02 sec, wall time      5.58 sec
Monkhorst pack size [3 3 3] ew_eta 2.0680636387390696 ew_cut 3.402350398388744
Ewald components = 0, -1.16695765003732, 1.05358783663642
    CPU time for get_j pass 1     53.48 sec, wall time      1.86 sec
    CPU time for get_j pass 2      6.61 sec, wall time      0.94 sec
    CPU time for vj and vk   2339.13 sec, wall time     80.54 sec
    CPU time for vnuc pass1: analytic int    536.16 sec, wall time     17.32 sec
    CPU time for contracting Vnuc [0:216]     18.56 sec, wall time      0.63 sec
    CPU time for contracting Vnuc     18.56 sec, wall time      0.63 sec
    CPU time for get_nuc    554.85 sec, wall time     17.95 sec
Ewald components = 3.0606179073546e-132, -242.469443607053, 213.698400957796
    CPU time for vnuc pass1: analytic int    541.29 sec, wall time     18.63 sec
    CPU time for contracting Vnuc [0:216]     20.35 sec, wall time      0.70 sec
    CPU time for contracting Vnuc     20.42 sec, wall time      0.70 sec
    CPU time for get_nuc    561.83 sec, wall time     19.33 sec
E1 = (-51.275869123500996+3.021212917597644e-14j)  E_coul = (4.277494077824725+1.1687083229333116e-14j)
using HDF5 ERI storage
    CPU time for transforming oopq 172194.54 sec, wall time   6852.09 sec
    CPU time for transforming ovpq 199904.94 sec, wall time   7548.07 sec
    CPU time for transforming vvvv   2373.92 sec, wall time     76.27 sec
    CPU time for CCSD integral transformation 377946.82 sec, wall time  14595.18 sec
    CPU time for EOM-CCSD shared one-electron intermediates  44534.64 sec, wall time   1586.01 sec
IMDS key to save: Loo , type: <class 'numpy.ndarray'>
IMDS key to save: Lvv , type: <class 'numpy.ndarray'>
IMDS key to save: Fov , type: <class 'numpy.ndarray'>

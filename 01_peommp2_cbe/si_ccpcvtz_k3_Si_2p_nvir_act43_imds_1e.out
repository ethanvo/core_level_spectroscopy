    CPU time for get_k_kpts: make_kpt ki>=kj (0,*)      3.42 sec, wall time      0.18 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (1,*)     12.16 sec, wall time      0.41 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (2,*)     21.06 sec, wall time      0.66 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (3,*)     25.53 sec, wall time      0.81 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (4,*)     34.66 sec, wall time      1.12 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (5,*)     41.74 sec, wall time      1.31 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (6,*)     46.96 sec, wall time      1.50 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (7,*)     57.16 sec, wall time      1.81 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (8,*)     62.32 sec, wall time      1.96 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (9,*)     72.12 sec, wall time      2.26 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (10,*)     72.05 sec, wall time      2.29 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (11,*)     79.95 sec, wall time      2.51 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (12,*)     93.69 sec, wall time      2.95 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (13,*)     94.64 sec, wall time      2.98 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (14,*)    102.61 sec, wall time      3.25 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (15,*)    104.46 sec, wall time      3.31 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (16,*)    119.48 sec, wall time      3.82 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (17,*)    119.38 sec, wall time      3.76 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (18,*)    128.43 sec, wall time      4.04 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (19,*)    136.91 sec, wall time      4.30 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (20,*)    144.12 sec, wall time      4.52 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (21,*)    144.46 sec, wall time      4.59 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (22,*)    152.66 sec, wall time      4.80 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (23,*)    159.89 sec, wall time      5.02 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (24,*)    161.56 sec, wall time      5.08 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (25,*)    172.41 sec, wall time      5.42 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (26,*)    183.56 sec, wall time      5.76 sec
Monkhorst pack size [3 3 3] ew_eta 1.379780863988 ew_cut 5.096557435665055
Ewald components = 0, -0.778571064310922, 0.704115632351815
    CPU time for get_j pass 1     79.09 sec, wall time      2.52 sec
    CPU time for get_j pass 2      7.65 sec, wall time      1.65 sec
    CPU time for vj and vk   2638.99 sec, wall time     84.77 sec
    CPU time for vnuc pass1: analytic int    294.17 sec, wall time      9.37 sec
    CPU time for contracting Vnuc [0:729]     70.60 sec, wall time      2.32 sec
    CPU time for contracting Vnuc     70.60 sec, wall time      2.32 sec
    CPU time for get_nuc    365.03 sec, wall time     11.70 sec
Ewald components = 1.37780080874323e-135, -879.68906505185, 776.814472849255
    CPU time for vnuc pass1: analytic int    286.84 sec, wall time      9.14 sec
    CPU time for contracting Vnuc [0:729]     69.63 sec, wall time      2.30 sec
    CPU time for contracting Vnuc     69.63 sec, wall time      2.30 sec
    CPU time for get_nuc    356.73 sec, wall time     11.44 sec
E1 = (-608.6704475892674+2.4915116468443835e-15j)  E_coul = (133.61105942915518-4.876369923934826e-16j)
using HDF5 ERI storage
    CPU time for transforming oopq 212942.32 sec, wall time   8317.66 sec
    CPU time for transforming ovpq 226713.49 sec, wall time   8829.26 sec
    CPU time for transforming vvvv   2376.70 sec, wall time     74.52 sec
    CPU time for CCSD integral transformation 445400.09 sec, wall time  17329.59 sec
    CPU time for EOM-CCSD shared one-electron intermediates  28296.65 sec, wall time   1080.45 sec
IMDS key to save: Loo , type: <class 'numpy.ndarray'>
IMDS key to save: Lvv , type: <class 'numpy.ndarray'>
IMDS key to save: Fov , type: <class 'numpy.ndarray'>
Made 1e intermediates

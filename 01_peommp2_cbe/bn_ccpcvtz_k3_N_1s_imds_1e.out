    CPU time for get_k_kpts: make_kpt ki>=kj (0,*)      3.34 sec, wall time      0.44 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (1,*)     12.51 sec, wall time      0.42 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (2,*)     20.33 sec, wall time      0.67 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (3,*)     23.40 sec, wall time      0.88 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (4,*)     27.84 sec, wall time      0.88 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (5,*)     30.73 sec, wall time      0.99 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (6,*)     38.71 sec, wall time      1.25 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (7,*)     32.50 sec, wall time      1.06 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (8,*)     33.90 sec, wall time      1.13 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (9,*)     57.34 sec, wall time      1.82 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (10,*)     53.15 sec, wall time      1.71 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (11,*)     55.26 sec, wall time      1.77 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (12,*)     61.99 sec, wall time      1.97 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (13,*)     60.22 sec, wall time      1.93 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (14,*)     62.73 sec, wall time      1.98 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (15,*)     72.52 sec, wall time      2.51 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (16,*)     75.78 sec, wall time      2.48 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (17,*)     70.78 sec, wall time      2.30 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (18,*)     95.00 sec, wall time      3.06 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (19,*)     80.72 sec, wall time      2.56 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (20,*)     73.92 sec, wall time      2.34 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (21,*)     93.06 sec, wall time      3.03 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (22,*)     90.07 sec, wall time      2.86 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (23,*)     88.79 sec, wall time      2.83 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (24,*)     93.66 sec, wall time      3.01 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (25,*)    114.07 sec, wall time      3.64 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (26,*)    101.61 sec, wall time      3.23 sec
Monkhorst pack size [3 3 3] ew_eta 2.0415012507608057 ew_cut 3.446555143149695
Ewald components = 0, -1.15196888453017, 1.04011066863786
    CPU time for get_j pass 1     26.02 sec, wall time      0.99 sec
    CPU time for get_j pass 2      4.64 sec, wall time      0.62 sec
    CPU time for vj and vk   1661.89 sec, wall time     54.63 sec
    CPU time for vnuc pass1: analytic int   1478.08 sec, wall time     48.15 sec
    CPU time for contracting Vnuc [0:216]     26.64 sec, wall time      0.85 sec
    CPU time for contracting Vnuc     26.65 sec, wall time      0.85 sec
    CPU time for get_nuc   1504.84 sec, wall time     49.01 sec
Ewald components = 2.22177160975447e-132, -245.992357858762, 217.051170209755
    CPU time for vnuc pass1: analytic int   1458.10 sec, wall time     47.28 sec
    CPU time for contracting Vnuc [0:216]     27.36 sec, wall time      0.86 sec
    CPU time for contracting Vnuc     27.36 sec, wall time      0.86 sec
    CPU time for get_nuc   1485.56 sec, wall time     48.14 sec
E1 = (-56.02167884463832-4.808618231337332e-14j)  E_coul = (5.67909955533643+4.876658383027011e-14j)
using HDF5 ERI storage
    CPU time for transforming oopq 125255.59 sec, wall time   4120.82 sec
    CPU time for transforming ovpq 169114.62 sec, wall time   6558.00 sec
    CPU time for transforming vvvv   1344.95 sec, wall time     42.60 sec
    CPU time for CCSD integral transformation 300373.34 sec, wall time  10873.62 sec
    CPU time for EOM-CCSD shared one-electron intermediates  32139.87 sec, wall time   1312.83 sec
IMDS key to save: Loo , type: <class 'numpy.ndarray'>
IMDS key to save: Lvv , type: <class 'numpy.ndarray'>
IMDS key to save: Fov , type: <class 'numpy.ndarray'>
Made 1e intermediates

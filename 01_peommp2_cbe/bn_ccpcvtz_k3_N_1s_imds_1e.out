    CPU time for get_k_kpts: make_kpt ki>=kj (0,*)      2.37 sec, wall time      0.16 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (1,*)      7.22 sec, wall time      0.26 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (2,*)     12.56 sec, wall time      0.41 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (3,*)     12.96 sec, wall time      0.42 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (4,*)     14.68 sec, wall time      0.47 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (5,*)     19.05 sec, wall time      0.60 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (6,*)     21.41 sec, wall time      0.69 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (7,*)     24.49 sec, wall time      0.77 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (8,*)     27.75 sec, wall time      0.89 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (9,*)     30.80 sec, wall time      0.97 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (10,*)     32.46 sec, wall time      1.02 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (11,*)     36.36 sec, wall time      1.15 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (12,*)     38.21 sec, wall time      1.21 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (13,*)     42.35 sec, wall time      1.34 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (14,*)     42.86 sec, wall time      1.35 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (15,*)     48.63 sec, wall time      1.53 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (16,*)     49.03 sec, wall time      1.55 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (17,*)     52.44 sec, wall time      1.65 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (18,*)     49.08 sec, wall time      1.55 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (19,*)     52.19 sec, wall time      1.65 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (20,*)     57.11 sec, wall time      1.80 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (21,*)     69.58 sec, wall time      2.28 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (22,*)     63.46 sec, wall time      2.00 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (23,*)     69.90 sec, wall time      2.22 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (24,*)     67.79 sec, wall time      2.14 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (25,*)     69.41 sec, wall time      2.19 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (26,*)     73.74 sec, wall time      2.32 sec
Monkhorst pack size [3 3 3] ew_eta 2.0415012507608057 ew_cut 3.446555143149695
Ewald components = 0, -1.15196888453017, 1.04011066863786
    CPU time for get_j pass 1     29.64 sec, wall time      0.93 sec
    CPU time for get_j pass 2      6.59 sec, wall time      0.59 sec
    CPU time for vj and vk   1130.24 sec, wall time     36.30 sec
    CPU time for vnuc pass1: analytic int   1486.64 sec, wall time     48.50 sec
    CPU time for contracting Vnuc [0:216]     26.82 sec, wall time      0.85 sec
    CPU time for contracting Vnuc     26.83 sec, wall time      0.85 sec
    CPU time for get_nuc   1513.56 sec, wall time     49.35 sec
Ewald components = 2.22177160975447e-132, -245.992357858762, 217.051170209755
    CPU time for vnuc pass1: analytic int   1453.97 sec, wall time     47.09 sec
    CPU time for contracting Vnuc [0:216]     27.16 sec, wall time      0.86 sec
    CPU time for contracting Vnuc     27.16 sec, wall time      0.86 sec
    CPU time for get_nuc   1481.24 sec, wall time     47.96 sec
E1 = (-56.02167884463832-4.8086152815745044e-14j)  E_coul = (5.679099555336417+4.896819211033804e-14j)
using HDF5 ERI storage
    CPU time for transforming oopq 151130.66 sec, wall time   5008.54 sec
    CPU time for transforming ovpq 204600.53 sec, wall time   7861.16 sec
    CPU time for transforming vvvv   1597.90 sec, wall time     50.95 sec
    CPU time for CCSD integral transformation 361465.76 sec, wall time  13054.80 sec
    CPU time for EOM-CCSD shared one-electron intermediates  32368.60 sec, wall time   1319.79 sec
IMDS key to save: Loo , type: <class 'numpy.ndarray'>
IMDS key to save: Lvv , type: <class 'numpy.ndarray'>
IMDS key to save: Fov , type: <class 'numpy.ndarray'>
Made 1e intermediates

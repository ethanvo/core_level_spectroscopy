    CPU time for get_k_kpts: make_kpt ki>=kj (0,*)      2.72 sec, wall time      0.34 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (1,*)      7.73 sec, wall time      0.29 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (2,*)     17.57 sec, wall time      0.59 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (3,*)     26.22 sec, wall time      0.84 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (4,*)     31.52 sec, wall time      1.02 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (5,*)     34.91 sec, wall time      1.14 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (6,*)     36.31 sec, wall time      1.15 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (7,*)     41.37 sec, wall time      1.32 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (8,*)     36.66 sec, wall time      1.16 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (9,*)     63.74 sec, wall time      2.07 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (10,*)     59.48 sec, wall time      1.90 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (11,*)     69.78 sec, wall time      2.37 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (12,*)     67.98 sec, wall time      2.19 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (13,*)     68.94 sec, wall time      2.32 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (14,*)     66.28 sec, wall time      2.10 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (15,*)     79.66 sec, wall time      2.56 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (16,*)     79.23 sec, wall time      2.53 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (17,*)     65.55 sec, wall time      2.10 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (18,*)     97.79 sec, wall time      3.12 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (19,*)     85.99 sec, wall time      2.76 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (20,*)     73.84 sec, wall time      2.36 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (21,*)     91.73 sec, wall time      2.92 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (22,*)     84.53 sec, wall time      2.69 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (23,*)     95.48 sec, wall time      3.03 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (24,*)    100.55 sec, wall time      3.18 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (25,*)    109.33 sec, wall time      3.57 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (26,*)     99.81 sec, wall time      3.16 sec
Monkhorst pack size [3 3 3] ew_eta 2.0415012507608057 ew_cut 3.446555143149695
Ewald components = 0, -1.15196888453017, 1.04011066863786
    CPU time for get_j pass 1     32.78 sec, wall time      1.12 sec
    CPU time for get_j pass 2      6.55 sec, wall time      1.09 sec
    CPU time for vj and vk   1738.87 sec, wall time     57.16 sec
    CPU time for vnuc pass1: analytic int   1479.04 sec, wall time     48.07 sec
    CPU time for contracting Vnuc [0:216]     27.60 sec, wall time      0.88 sec
    CPU time for contracting Vnuc     27.60 sec, wall time      0.88 sec
    CPU time for get_nuc   1506.77 sec, wall time     48.95 sec
Ewald components = 2.22177160975447e-132, -245.992357858762, 217.051170209755
    CPU time for vnuc pass1: analytic int   1479.41 sec, wall time     48.13 sec
    CPU time for contracting Vnuc [0:216]     28.04 sec, wall time      0.88 sec
    CPU time for contracting Vnuc     28.05 sec, wall time      0.88 sec
    CPU time for get_nuc   1507.56 sec, wall time     49.02 sec
E1 = (-56.02167884463839-4.8091569163637174e-14j)  E_coul = (5.679099555336422+4.8880256675933145e-14j)
using HDF5 ERI storage
    CPU time for transforming oopq 147440.98 sec, wall time   4777.20 sec
    CPU time for transforming ovpq 149161.16 sec, wall time   4805.41 sec
    CPU time for transforming vvvv   1015.62 sec, wall time     31.85 sec
    CPU time for CCSD integral transformation 302377.27 sec, wall time   9769.83 sec
    CPU time for EOM-CCSD shared one-electron intermediates   1794.02 sec, wall time     58.25 sec
IMDS key to save: Loo , type: <class 'numpy.ndarray'>
IMDS key to save: Lvv , type: <class 'numpy.ndarray'>
IMDS key to save: Fov , type: <class 'numpy.ndarray'>
Made 1e intermediates

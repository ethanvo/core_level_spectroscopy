    CPU time for get_k_kpts: make_kpt ki>=kj (0,*)      7.95 sec, wall time      0.40 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (1,*)     10.42 sec, wall time      0.51 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (2,*)     21.83 sec, wall time      0.70 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (3,*)     24.72 sec, wall time      0.81 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (4,*)     30.37 sec, wall time      0.97 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (5,*)     30.81 sec, wall time      0.98 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (6,*)     32.30 sec, wall time      1.03 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (7,*)     41.99 sec, wall time      1.34 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (8,*)     37.77 sec, wall time      1.19 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (9,*)     60.11 sec, wall time      1.93 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (10,*)     54.25 sec, wall time      1.74 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (11,*)     62.43 sec, wall time      1.98 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (12,*)     66.85 sec, wall time      2.13 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (13,*)     71.31 sec, wall time      2.31 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (14,*)     63.60 sec, wall time      2.05 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (15,*)     72.91 sec, wall time      2.31 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (16,*)     75.19 sec, wall time      2.38 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (17,*)     70.56 sec, wall time      2.24 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (18,*)     99.26 sec, wall time      3.19 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (19,*)     89.35 sec, wall time      2.83 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (20,*)     76.19 sec, wall time      2.42 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (21,*)     96.31 sec, wall time      3.05 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (22,*)     89.70 sec, wall time      2.83 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (23,*)     92.77 sec, wall time      2.93 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (24,*)    100.42 sec, wall time      3.18 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (25,*)    107.69 sec, wall time      3.40 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (26,*)    107.94 sec, wall time      3.41 sec
Monkhorst pack size [3 3 3] ew_eta 2.0415012507608057 ew_cut 3.446555143149695
Ewald components = 0, -1.15196888453017, 1.04011066863786
    CPU time for get_j pass 1     28.50 sec, wall time      0.95 sec
    CPU time for get_j pass 2      6.59 sec, wall time      0.59 sec
    CPU time for vj and vk   1735.97 sec, wall time     56.00 sec
    CPU time for vnuc pass1: analytic int   1471.26 sec, wall time     47.67 sec
    CPU time for contracting Vnuc [0:216]     27.12 sec, wall time      0.87 sec
    CPU time for contracting Vnuc     27.13 sec, wall time      0.87 sec
    CPU time for get_nuc   1498.49 sec, wall time     48.54 sec
Ewald components = 2.22177160975447e-132, -245.992357858762, 217.051170209755
    CPU time for vnuc pass1: analytic int   1461.71 sec, wall time     47.71 sec
    CPU time for contracting Vnuc [0:216]     27.28 sec, wall time      0.86 sec
    CPU time for contracting Vnuc     27.29 sec, wall time      0.87 sec
    CPU time for get_nuc   1489.09 sec, wall time     48.58 sec
E1 = (-56.02167884463835-4.807761919378202e-14j)  E_coul = (5.679099555336398+4.8923825154841854e-14j)
using HDF5 ERI storage
    CPU time for transforming oopq 147295.93 sec, wall time   4797.20 sec
    CPU time for transforming ovpq 202793.62 sec, wall time   7232.91 sec
    CPU time for transforming vvvv   1580.66 sec, wall time     49.84 sec
    CPU time for CCSD integral transformation 356398.95 sec, wall time  12233.26 sec
    CPU time for EOM-CCSD shared one-electron intermediates  25297.78 sec, wall time   1008.35 sec
IMDS key to save: Loo , type: <class 'numpy.ndarray'>
IMDS key to save: Lvv , type: <class 'numpy.ndarray'>
IMDS key to save: Fov , type: <class 'numpy.ndarray'>
Made 1e intermediates

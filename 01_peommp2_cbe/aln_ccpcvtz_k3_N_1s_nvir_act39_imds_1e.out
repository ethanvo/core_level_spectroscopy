    CPU time for get_k_kpts: make_kpt ki>=kj (0,*)     24.63 sec, wall time      1.03 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (1,*)     76.07 sec, wall time      2.57 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (2,*)    110.50 sec, wall time      3.94 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (3,*)    144.76 sec, wall time      5.12 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (4,*)    190.46 sec, wall time      7.09 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (5,*)    210.90 sec, wall time      7.84 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (6,*)    255.06 sec, wall time      9.13 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (7,*)    294.17 sec, wall time     10.32 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (8,*)    352.39 sec, wall time     12.27 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (9,*)    369.28 sec, wall time     13.21 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (10,*)    398.55 sec, wall time     14.35 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (11,*)    452.43 sec, wall time     15.87 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (12,*)    478.47 sec, wall time     16.87 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (13,*)    510.40 sec, wall time     17.89 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (14,*)    551.39 sec, wall time     18.95 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (15,*)    575.00 sec, wall time     20.93 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (16,*)    630.29 sec, wall time     27.52 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (17,*)    645.78 sec, wall time     22.67 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (18,*)    710.95 sec, wall time     25.17 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (19,*)    734.30 sec, wall time     26.76 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (20,*)    799.72 sec, wall time     28.41 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (21,*)    806.88 sec, wall time     28.39 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (22,*)    886.56 sec, wall time     30.85 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (23,*)    927.53 sec, wall time     33.03 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (24,*)    961.51 sec, wall time     33.61 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (25,*)   1012.96 sec, wall time     35.90 sec
    CPU time for get_k_kpts: make_kpt ki>=kj (26,*)   1040.30 sec, wall time     36.24 sec
Monkhorst pack size [3 3 3] ew_eta 0.8844880366313383 ew_cut 7.945196698079207
Ewald components = 7.43877040383099e-109, -0.499283113992858, 0.434708743263287
    CPU time for get_j pass 1    376.93 sec, wall time     11.88 sec
    CPU time for get_j pass 2     14.51 sec, wall time      8.33 sec
    CPU time for vj and vk  14552.04 sec, wall time    526.73 sec
    CPU time for vnuc pass1: analytic int   3569.16 sec, wall time    112.83 sec
    CPU time for contracting Vnuc [0:896]    312.95 sec, wall time     10.68 sec
    CPU time for contracting Vnuc    312.95 sec, wall time     10.68 sec
    CPU time for get_nuc   3882.98 sec, wall time    123.55 sec
Ewald components = 1.30435514859409e-35, -627.49757153652, 488.979720419325
    CPU time for vnuc pass1: analytic int   3588.51 sec, wall time    113.34 sec
    CPU time for contracting Vnuc [0:896]    299.76 sec, wall time     10.16 sec
    CPU time for contracting Vnuc    299.76 sec, wall time     10.16 sec
    CPU time for get_nuc   3889.08 sec, wall time    123.52 sec
E1 = (-567.716147446463+3.352745637223733e-12j)  E_coul = (113.09239929413987+9.605302984409939e-12j)
using HDF5 ERI storage
    CPU time for transforming oopq 309263.49 sec, wall time  38237.11 sec
    CPU time for transforming ovpq 338657.33 sec, wall time  40105.59 sec
    CPU time for transforming vvvv   7588.83 sec, wall time    382.33 sec
    CPU time for CCSD integral transformation 677847.26 sec, wall time  79499.41 sec
    CPU time for EOM-CCSD shared one-electron intermediates  63775.66 sec, wall time   2224.65 sec
IMDS key to save: Loo , type: <class 'numpy.ndarray'>
IMDS key to save: Lvv , type: <class 'numpy.ndarray'>
IMDS key to save: Fov , type: <class 'numpy.ndarray'>
Made 1e intermediates
